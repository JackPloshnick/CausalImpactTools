-commercial_units,
-apartment_number,
-residential_units,
-`ease-ment`,
-block,
-lot,
-borough,
-total_units,
-building_class,
-sale_date,
-building_class_at_time_of_sale,
-tax_class)
df_test <- df
#zip as factor
df_test$zip_code <- as.factor(df_test$zip_code)
#month
df_test$sale_month<- sub("/.*", "", df_test$sale_date)
df_test$sale_month <- as.factor(df_test$sale_month)
#land sq feet
df_test$land_square_feet <- gsub(",", "", df_test$land_square_feet)
df_test$land_square_feet <- as.numeric(df_test$land_square_feet)
df_test <- df_test %>%
select(
-tax_class_at_time_of_sale,
-address,
-commercial_units,
-apartment_number,
-residential_units,
-`ease-ment`,
-block,
-lot,
-borough,
-total_units,
-building_class,
-sale_date,
-building_class_at_time_of_sale,
-tax_class)
str(df_test)
model <- lm(sale_price ~ .  , data=df_test)
summary(model)
preds <- predict(model, df_test %>% select(-sale_price))
rmse(df_test$sale_price, preds)
############################
df_counts <- df %>%
group_by(neighborhood) %>%
summarize(count = n())
############################
df_test
############################
df_quarter <- ifelse(df_test$sale_month <=3,"q1",
ifelse(df_test$sale_month <=6,"q2",
ifelse(df_test$sale_month <=9,"q3","q4")))
############################
df_quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
############################
df_test$sale_month <- as.numeric(df_test$sale_month)
df_quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df_quarter
df$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df
############################
df_quarter <- df
df_quarter$sale_month<- sub("/.*", "", df_quarter$sale_date)
df_quarter$sale_month <- as.numeric(df_quarter$sale_month)
df_test$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_test$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_quarter$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df_quarter <- [(df_quarter$sale_year == 2020) & (df_quarter$sale_month >6),]
df_quarter <- [(df_quarter$sale_year == 2020) & (df_quarter$sale_month >6),]
df_quarter <- df_quarter[(df_quarter$sale_year == 2020) & (df_quarter$sale_month >6),]
model_quarter <- lm(sale_price ~ quarter, df_quarter)
View(df_quarter)
############################
df_quarter <- df
df_quarter$sale_month<- sub("/.*", "", df_quarter$sale_date)
df_quarter$sale_month <- as.numeric(df_quarter$sale_month)
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_quarter$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df_quarter <- df_quarter[(df_quarter$sale_year == 2020) & (df_quarter$sale_month >6),]
############################
df_quarter <- df
df_quarter$sale_month<- sub("/.*", "", df_quarter$sale_date)
df_quarter$sale_month <- as.numeric(df_quarter$sale_month)
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_quarter$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df_quarter <- df_quarter[(df_quarter$sale_year == 2020) & (df_quarter$sale_month >6),]
df_quarter <- df_quarter[(df_quarter$sale_year == 2020) ,]
############################
df_quarter <- df
df_quarter$sale_month<- sub("/.*", "", df_quarter$sale_date)
df_quarter$sale_month <- as.numeric(df_quarter$sale_month)
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_quarter$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df_quarter <- df_quarter[(df_quarter$sale_year == 2020) ,]
############################
df_quarter <- df
df_quarter$sale_month<- sub("/.*", "", df_quarter$sale_date)
df_quarter$sale_month <- as.numeric(df_quarter$sale_month)
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_quarter$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
############################
df_quarter <- df
df_quarter$sale_month<- sub("/.*", "", df_quarter$sale_date)
df_quarter$sale_month <- as.numeric(df_quarter$sale_month)
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_quarter$quarter <- ifelse(df_test$sale_month <= 3,"q1",
ifelse(df_test$sale_month <= 6,"q2",
ifelse(df_test$sale_month <= 9,"q3","q4")))
df_quarter <- df_quarter[(df_quarter$sale_year == 20) & (df_quarter$sale_month >6),]
model_quarter <- lm(sale_price ~ quarter, df_quarter)
summary(model_quarter)
View(df_quarter)
?ifelse
df_quarter$quarter <- ifelse(df_test$sale_month <= 3,"q1",'fuck')
df_quarter$quarter <- ifelse(df_test$sale_month <= 3,"q1",'fuck')
df_quarter$sale_month<- sub("/.*", "", df_quarter$sale_date)
df_quarter$sale_month <- as.numeric(df_quarter$sale_month)
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_quarter$quarter <- ifelse(df_quarter$sale_month <= 3,"q1",
ifelse(df_quarter$sale_month <= 6,"q2",
ifelse(df_quarter$sale_month <= 9,"q3","q4")))
df_quarter <- df_quarter[(df_quarter$sale_year == 20) & (df_quarter$sale_month > 6),]
model_quarter <- lm(sale_price ~ quarter, df_quarter)
summary(model_quarter)
############################
df_quarter <- df_test
df_quarter$sale_month <- as.numeric(df_quarter$sale_month)
df_quarter$sale_year <- substr(df_quarter$sale_date, nchar(df_quarter$sale_date) - 1, nchar(df_quarter$sale_date))
df_quarter$sale_year <- substr(df$sale_date, nchar(df$sale_date) - 1, nchar(df$sale_date))
df_quarter$quarter <- ifelse(df_quarter$sale_month <= 3,"q1",
ifelse(df_quarter$sale_month <= 6,"q2",
ifelse(df_quarter$sale_month <= 9,"q3","q4")))
df_quarter <- df_quarter[(df_quarter$sale_year == 20) & (df_quarter$sale_month > 6),]
df_quarter
df_quarter <- df_quarter %>% select (-sale_month, -sale_year)
model_controls <- lm(sale_price ~ 8, df_quarter)
model_controls <- lm(sale_price ~ ., df_quarter)
summary(model_controls)
summary(model_quarter)
summary(model_controls)
require(faraway)
require(lmtest)
#1. Mutation data:
#   1.1 Make upfront modeling choices
help(dicentric)
head(dicentric)
naive.lm <- lm(ca~.,dicentric)
summary(naive.lm)
basic.lm <- lm(I(ca/cells)~.,dicentric)
summary(basic.lm)
#   1.2 Test IID assumptions
hist(basic.lm$residuals)
head(dicentric)
#Bring in the data, create a 1/0 response variable
#install.packages('faraway')
require(farawazy)
#Bring in the data, create a 1/0 response variable
#install.packages('faraway')
require(faraway)
data("orings")
head(orings)
orings$failure <- orings$damage != 0
head(orings)
#Model the data using logistic regression
orings.model<-glm(failure~temp,family=binomial(link=logit),data=orings)
summary(orings.model)
View(orings)
logistic <- function(x) exp(x)/(1+exp(x))
logistic(orings.model$coefficients[1]) #p(Failure) @ 0F
-orings.model$coefficient[1]/orings.model$coefficient[2] #p50 Failure temp
(yhat <- c(orings.model$coefficients%*%c(1,32)))
logistic(yhat) #p(Failure) @ 32F
predict(orings.model,newdata=data.frame(temp=32),type="response")
#Plot the past and predicted future outcomes
plot(orings$temp,orings$failure,
xlim=c(30,80),xlab='Launch Temperature (F)',
ylab=c('Probability of O-ring Damage'),axes=FALSE,
main='Likelihood of Damage to STS-51-L',
pch=3+orings$failure,col=c('forestgreen','red')[1+orings$failure])
axis(side=1,at=seq(30,80,10),labels=T)
axis(side=2,at=c(0.0,0.1,0.9,1.0),labels=c('0%','10%','90%','100%'),las=2)
lines(x=seq(30,80,0.5),y=exp(cbind(rep(1,101),seq(30,80,0.5))%*%orings.model$coefficients)/
(1+exp(cbind(rep(1,101),seq(30,80,0.5))%*%orings.model$coefficients)),
col='blue')
points(x=32,y=exp(c(1,32)%*%orings.model$coefficients)/
(1+exp(c(1,32)%*%orings.model$coefficients)),
pch=16,col='blue')
text(x=32,y=exp(c(1,32)%*%orings.model$coefficients)/
(1+exp(c(1,32)%*%orings.model$coefficients)),
labels='Pred. Prob = 99.95%',col='blue',pos=1,cex=0.6)
legend(x='bottomleft',pch=c(4,3,NA,16),lty=c(NA,NA,1,NA),
col=c('red','forestgreen','blue','blue'),bty='n',
legend=c('Missions w/ Damage','Missions w/o Damage',
'Logistic Predictions','STS-51-L Launch'),cex=0.7,
inset=c(0.06,0.03))
#Effect of a one-degree change
summary(orings.model)$coefficients
exp(orings.model$coefficients[2])
exp(orings.model$coefficients[2])-1
#Effect of a ten-degree change
exp(10*orings.model$coefficients[2])
exp(10*orings.model$coefficients[2])-1
data("orings")
head(orings)
orings$failure <- orings$damage != 0
head(orings)
#Model the data using logistic regression
orings.model<-glm(failure~temp,family=binomial(link=logit),data=orings)
summary(orings.model)
logistic <- function(x) exp(x)/(1+exp(x))
logistic(orings.model$coefficients[1]) #p(Failure) @ 0F
predict(orings.model,newdata=data.frame(temp=32),type="response")
?exp
library(readr)
sample_orig_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_orig_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE)
sample_svcg_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_svcg_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE)
View(sample_orig_2007)
View(sample_svcg_2007)
sample_orig_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_orig_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE)
sample_svcg_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_svcg_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE)
View(sample_orig_2007)
View(sample_orig_2007)
View(sample_svcg_2007)
originations <-sample_orig_2007[, c(1, 4, 5, 7, 22)]
View(originations)
library(readr)
sample_orig_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_orig_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE)
sample_svcg_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_svcg_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE)
servicing <-sample_svcg_2007[, c(1, 4, 5, 7, 22)]
servicing <- servicing %>%
rename(
loan_id = X1,
status = X4
)
library(dplyr)
servicing <- servicing %>%
rename(
loan_id = X1,
status = X4
)
View(servicing)
sample_svcg_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_svcg_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE)
servicing <-sample_svcg_2007[, c(1, 4, 5, 7, 22)]
servicing <- servicing %>%
rename(
loan_id = X1,
status = X4,
age = X5,
defect_settlement_flag = X7,
loss = X22
)
servicing[servicing$age >36,]
servicing[servicing$age > 036,]
str(servicing)
sample_svcg_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_svcg_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE)
View(sample_svcg_2007)
servicing$age <- as.numeric(df$age)
servicing$age <- as.numeric(servicing$age)
servicing$loss <- as.numeric(servicing$loss)
servicing[servicing$age > 036,]
servicing[servicing$age > 36,]
df <- servicing[servicing$age > 36,]
length(unique(df$loan_id))
View(sample_orig_2007)
df <- servicing[servicing$age> 36,]
length(unique(df$loan_id))
length(df$loan_id)
servicing <- servicing[servicing$age <= 36,]
View(sample_orig_2007)
unique(servicing$status)
servicing$status <- ifelse(servicing$status=='RA',100,servicing$status)
servicing$status <- as.numeric(servicing$status )
unique(servicing$status)
# Create a flag for loan default.  A loan receives a default flag of '1' if it was ever 90+ days delinquent or
# repossessed during its first 36 months (using column 4, status), or if took a loss with a negative dollar
# amount during its first 36 months (using column 22, loss).
# By my count 4863 loans defaulted (after filtering to first 36 months).
servicing[servicing$status >= 3,]
# Create a flag for loan default.  A loan receives a default flag of '1' if it was ever 90+ days delinquent or
# repossessed during its first 36 months (using column 4, status), or if took a loss with a negative dollar
# amount during its first 36 months (using column 22, loss).
# By my count 4863 loans defaulted (after filtering to first 36 months).
df <- servicing[servicing$status >= 3,]
length(unique(df$loan_id))
View(df)
# Create a flag for loan default.  A loan receives a default flag of '1' if it was ever 90+ days delinquent or
# repossessed during its first 36 months (using column 4, status), or if took a loss with a negative dollar
# amount during its first 36 months (using column 22, loss).
# By my count 4863 loans defaulted (after filtering to first 36 months).
servicing$default <- ifelse(df$status>=3,1,ifelse(df$loss <0,1,0))
# Create a flag for loan default.  A loan receives a default flag of '1' if it was ever 90+ days delinquent or
# repossessed during its first 36 months (using column 4, status), or if took a loss with a negative dollar
# amount during its first 36 months (using column 22, loss).
# By my count 4863 loans defaulted (after filtering to first 36 months).
servicing$default <- ifelse(df$status>=3,1,ifelse(df$loss < 0,1,0))
# Create a flag for loan default.  A loan receives a default flag of '1' if it was ever 90+ days delinquent or
# repossessed during its first 36 months (using column 4, status), or if took a loss with a negative dollar
# amount during its first 36 months (using column 22, loss).
# By my count 4863 loans defaulted (after filtering to first 36 months).
servicing$default <- ifelse(servicing$status>=3,1,
ifelse(servicing$loss < 0,1,0))
# Clean servicing data
#1, 4, 5, 7, and 22 (loan id, status, age, defect settlement flag, and loss),
servicing <-sample_svcg_2007[, c(1, 4, 5, 7, 22)]
servicing <- servicing %>%
rename(
loan_id = X1,
status = X4,
age = X5,
defect_settlement_flag = X7,
loss = X22
)
servicing$age <- as.numeric(servicing$age)
servicing$loss <- as.numeric(servicing$loss)
servicing$status <- ifelse(servicing$status=='RA',100,servicing$status)
servicing$status <- as.numeric(servicing$status )
# Filter the servicing history to only examine loans in the first 36 months after origination (using column 5, loan age).
# This should remove 26 unique loan ids.
servicing <- servicing[servicing$age <= 36,]
# Create a flag for loan default.  A loan receives a default flag of '1' if it was ever 90+ days delinquent or
# repossessed during its first 36 months (using column 4, status), or if took a loss with a negative dollar
# amount during its first 36 months (using column 22, loss).
# By my count 4863 loans defaulted (after filtering to first 36 months).
servicing$default <- ifelse(servicing$status>=3,1,
ifelse(servicing$loss < 0,1,0))
servicing$default <-ifelse(servicing$status>=3 | ifelse(servicing$loss, 1, 0)
servicing$default <-ifelse(servicing$status>=3 | ifelse(servicing$loss, 1, 0)
servicing$default <-ifelse(servicing$status>=3 | ifelse(servicing$loss, 1, 0))
servicing$default <-ifelse(servicing$status>=3 | servicing$loss, 1, 0)
library(dplyr)
sample_orig_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_orig_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE)
sample_svcg_2007 <- read_delim("Documents/UChicago_MADS/general_datasets/sample_svcg_2007.txt",
delim = "|", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE)
# Clean servicing data
#1, 4, 5, 7, and 22 (loan id, status, age, defect settlement flag, and loss),
servicing <-sample_svcg_2007[, c(1, 4, 5, 7, 22)]
servicing <- servicing %>%
rename(
loan_id = X1,
status = X4,
age = X5,
defect_settlement_flag = X7,
loss = X22
)
servicing$age <- as.numeric(servicing$age)
servicing$loss <- as.numeric(servicing$loss)
servicing$status <- ifelse(servicing$status=='RA',100,servicing$status)
servicing$status <- as.numeric(servicing$status )
# Filter the servicing history to only examine loans in the first 36 months after origination (using column 5, loan age).
# This should remove 26 unique loan ids.
servicing <- servicing[servicing$age <= 36,]
servicing$default <-ifelse(servicing$status>=3 | servicing$loss, 1, 0)
str(servicing)
servicing$default <-ifelse(servicing$status>=3 | servicing$loss < 0, 1, 0)
servicing$loss[is.na(servicing$loss)] <- 0
servicing$default <-ifelse(servicing$status>=3 | servicing$loss < 0, 1, 0)
servicing <- servicing %>%
group_by(loan_id) %>%
mutate(any_default = ifelse(any(default == 1), 1, 0)) %>%
ungroup()
servicing[servicing$any_default ==1,]
length(unique( servicing[servicing$any_default ==1,]$loan_id))
servicing[servicing$any_default==0,]
servicing <-servicing[servicing$any_default==0,]
library(CausalImpact)
########################
# Start with flat data
set.seed(42)
install.packages("CausalImpact")
library(CausalImpact)
########################
# Start with flat data
set.seed(42)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
data <- cbind(y, x1)
find_min_lift <- function(data = NULL, pre.period = NULL,
post.period = NULL, model.args = NULL,
bsts.model = NULL, post.period.response = NULL,
alpha = 0.05, per_period_lifts = NULL) {
#prepare for the loop
results <- list()
pre.period.sd <- sd(data[,1][pre.period[1]:pre.period[2]])
counter <- 0
#loop through each lift value
for(lift in per_period_lifts){
loop_data <- data
# simulate a lift
loop_data[,1][post.period[1]:post.period[2]] <- loop_data[post.period[1]:post.period[2]] + rnorm(length(loop_data[post.period[1]:post.period[2]]), sd = pre.period.sd, mean = lift )
impact <- CausalImpact(data = loop_data, pre.period,
post.period, model.args,
bsts.model, post.period.response,
alpha = alpha)
counter <- counter + 1
results[[counter]] <- data.frame(lift = lift, p_value = impact$summary$p[1])
}
df <- do.call(rbind, results)
return(df)
}
df <- find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
df
install.packages(c("devtools", "roxygen2"))
usethis::create_package("~/Documents/CausalImpact_tools")
usethis::create_package("~/Documents/CausalImpactTools")
usethis::create_package("~/Documents/CausalImpactTools")
install.packages("devtools")
library(devtools)
devtools::install_github("JackPloshnick/CausalImpactTools")
?find_min_lift
library(CausalImpact)
########################
# Start with flat data
set.seed(42)
library(CausalImpact)
library(devtools)
devtools::install_github("JackPloshnick/CausalImpactTools")
?find_min_lift
########################
# Start with flat data
set.seed(42)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
data <- cbind(y, x1)
df <- find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
df
devtools::install_github("JackPloshnick/CausalImpactTools")
?CausalImpactTools::find_min_lift
df <- CausalImpactTools::find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
df
devtools::document()
setwd("~/Documents/CausalImpactTools")
devtools::document()
usethis::use_testthat()
devtools::build()
devtools::check()
usethis::use_github()
devtools::document()
setwd("~/Documents/CausalImpactTools")
devtools::document()
usethis::create_package("~/Documents/CausalImpactTools")
devtools::install_github("JackPloshnick/CausalImpactTools")
?CausalImpactTools::find_min_lift
########################
# Start with flat data
set.seed(42)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
data <- cbind(y, x1)
df <- CausalImpactTools::find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
df
devtools::install_github("JackPloshnick/CausalImpactTools")
?CausalImpactTools::find_min_lift
########################
# Start with flat data
set.seed(42)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
data <- cbind(y, x1)
df <- CausalImpactTools::find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
df
df
df <- CausalImpactTools::find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
library(CausalImpactTools)
library(CausalImpactTools)
?CausalImpactTools::find_min_lift
?find_min_lift
########################
# Start with flat data
set.seed(42)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
data <- cbind(y, x1)
df <- CausalImpactTools::find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
df
df <- find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
df
needed_lifts <- find_min_lift(data, per_period_lifts = c(0.01,1,2), pre.period = c(1,70), post.period = c(71,100))
needed_lifts
needed_lifts <- find_min_lift(data, per_period_lifts = c(0.01,1,2),
pre.period = c(1,70), post.period = c(71,100))
needed_lifts
